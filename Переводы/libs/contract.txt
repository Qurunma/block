// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.7.0 <0.9.0;

contract perevodi{
    struct users{
        address login;
        bytes32 password;
        uint role; // роли: 0 - администратор, 1 - рядовой пользователь
    }

    struct sample{
        uint category_id;
        string name_sample;
        uint sum;
    }

    struct transact{
        address sender;
        address resipient;
        uint sum;
        uint category;
        bool safe_transact; // перменная, для обзначения безопасный ли перевод
        bool is_admin_answer; // наличие решения администратора о безопасном переводе
        bool admin_answer; //  решениe администратора о безопасном переводе
        bytes32 code_word; // кодовое слово
        uint256 date_send; // дата отправвки
        uint256 date_accept; // дата принятия
        bool end; // завершение транзакции
        uint ateps;
    }

    struct vote{
        uint idVote;
        address candidate;
        address[] votes;
        bool idClosed;
        uint countOfVoted;
    }

    uint countAdmins = 0;

    users[] Users;
    string[] Categories;
    transact[] Transact;
    sample[] samples;
    vote[] Votes;


    constructor(){
        Users.push(users(0x7bF59Cd15e98CA4b0709acF68E0dA4e4f8855A35, keccak256(abi.encodePacked("1234")), 0)); 
        Users.push(users(0x70685A488CD2628B089b6C282e392f342F6c4e4D, keccak256(abi.encodePacked("4321")), 0));

        countAdmins+=2;

        Users.push(users(0x7e087BA162Ad7cCb915F77a315bB4819E8eE067C, keccak256(abi.encodePacked("mom")), 1));
        Users.push(users(0x0B3Ba54419955CE71dB26C5254a13F52a9d2ac5d, keccak256(abi.encodePacked("dad")), 1));
        Users.push(users(0x70C05c5CaE751bA756da38D9569ed3F07489e173, keccak256(abi.encodePacked("son")), 1));
        Users.push(users(0xa59A22b9421eCBd542A1A1122Bff94CE5B423910, keccak256(abi.encodePacked("sister")), 1));


        Categories.push("Personal transfer");
        samples.push(sample(0, "Gift", 1));
        samples.push(sample(0, "Gift", 3));
        samples.push(sample(0, "Gift", 5));

        Categories.push("Payment of rent");
        samples.push(sample(1, "Rent", 7));
        samples.push(sample(1, "Rent", 9));

        Categories.push("Personal settlements");
        samples.push(sample(2, "Debt repayment", 0));
    }

    modifier isUsers(address res, address sender){
        bool isExistsRes = false;
        bool isExistsSender = false;
        for (uint i = 0; i < Users.length; i++) {
            if(Users[i].login == res){
                isExistsRes = true;

            }
            else if(Users[i].login == sender){
                isExistsSender = true;
            }
        }
        require(isExistsRes && isExistsSender, "101");
        _;
    }

    function people_transfer(address recipient, uint category, bool safe_transact, bytes32 code_word) public payable isUsers(recipient, msg.sender){ //на интерфейсе проверка на сумму перевода больше 0
        require(msg.sender != recipient, "201");
        require(msg.value > 0, "202");
        Transact.push(transact(msg.sender, recipient, msg.value, category, safe_transact, false, false, code_word, block.timestamp, 0, false, 0));
    }

    function accept_resipient(uint id, bytes32 code_word) public payable {
        Transact[id].ateps++;
        require(Transact[id].resipient == msg.sender, "301");
        require(Transact[id].end == false, "302");
        require((Transact[id].safe_transact&&Transact[id].admin_answer)||!Transact[id].safe_transact, "303");
        if (code_word == Transact[id].code_word) {
            if(Transact[id].safe_transact) {
                require(Transact[id].ateps <= 2, "304");
                payable(Transact[id].resipient).transfer(Transact[id].sum - (Transact[id].sum / 1000));
            }
            else{
                payable(Transact[id].resipient).transfer(Transact[id].sum);
            }
        }
        else {
            if(Transact[id].ateps==3) {
                if(Transact[id].safe_transact) {
                    payable(Transact[id].sender).transfer(Transact[id].sum - (Transact[id].sum / 1000));
                }
                else{
                    payable(Transact[id].sender).transfer(Transact[id].sum);
                }
            }
        }
        Transact[id].end = true;
    }

    function cancel_transfer(uint id) public payable { //на интерфейсе проверка на вызов отправителем денег
        require(msg.sender == Transact[id].sender, "401");
        require(Transact[id].end == false, "402");
        payable(Transact[id].sender).transfer(Transact[id].sum);
        Transact[id].end = true;
    }

    modifier isAdmin(address candidate){
        for(uint i = 0; i<Users.length; i++) {
            if (Users[i].login == candidate) {
                require(Users[i].role == 0, "111");
                break;
            }
        }
        _;
    }

    function check_safe_transact(uint idTransact, bool answer) public payable isAdmin(msg.sender){
        payable(msg.sender).transfer(Transact[idTransact].sum / 1000);
            if (answer == true){
                Transact[idTransact].admin_answer = answer;
                
            }
            else{
                payable(Transact[idTransact].sender).transfer(Transact[idTransact].sum - Transact[idTransact].sum/1000);
                Transact[idTransact].end = true;
            }
            Transact[idTransact].admin_answer = answer;
            Transact[idTransact].is_admin_answer = true;
    }
     

    modifier isUniqueCategory(string memory category){
        for (uint i = 0; i < Categories.length; i++) {
            require (keccak256(abi.encodePacked(Categories[i])) != keccak256(abi.encodePacked(category)), "121");
        }
        _;
    }
    modifier isUniqueSample(uint id_category, string memory name, uint value){
        for (uint i = 0; i < samples.length; i++) {
            require (keccak256(abi.encodePacked(samples[i].name_sample)) != keccak256(abi.encodePacked(name)) || samples[i].category_id != id_category || samples[i].sum != value, "131");
        }
        _;
    }

    function createSamples(uint id_category, string memory name, uint value) public isUniqueSample(id_category, name, value){
        samples.push(sample(id_category, name, value));
    }

    function createCategory(string memory new_category) public isUniqueCategory(new_category){
        Categories.push(new_category);
    }

    modifier isNotAdmin(address candidate){
        for(uint i = 0; i<Users.length; i++) {
            if (Users[i].login == candidate) {
                require(Users[i].role != 0, "141");
                break;
            }
        }
        _;
    }

    modifier isVoted(uint id){
        for(uint i = 0; i<Votes[id].votes.length; i++) {
            require(Votes[id].votes[i] != msg.sender, "151");
            break;
        }
        _;
    }

    function add_new_admin(address candidate) public isNotAdmin(candidate) isAdmin(msg.sender) {
        address[] memory localVotes;
        localVotes[0]=msg.sender;
        Votes.push(vote(Votes.length, candidate, localVotes, false, 1));
    }

    function add_vote(uint id, bool voteOfMan) public isAdmin(msg.sender) isVoted(id){
        require(Votes[id].idClosed!=true, "501");
        Votes[id].countOfVoted+=1;
        if(voteOfMan){
            if(Votes[id].countOfVoted == countAdmins){
                for(uint i = 0; i<Users.length; i++) {
                    if (Users[i].login == Votes[id].candidate) {
                        Users[i].role = 0;
                        break;
                    }
                    Votes[id].idClosed=true;
                }
            }
        }
        else{
            Votes[id].idClosed=true;
        }
    }

    function register(address login, bytes32 password) public returns(uint){
        Users.push(users(login, password, 1));
        return(0);
    }

    function view_users() public view returns(users[] memory){
        return(Users);
    }

    function view_categories() public view returns(string[] memory){
        return(Categories);
    }

    function view_transactions() public view returns(transact[] memory){
        return(Transact);
    }

    function view_samples() public view returns(sample[] memory){
        return(samples);
    }
}
